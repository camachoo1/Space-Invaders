{"version":3,"file":"main.js","mappings":"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","sources":["webpack://space-invaders/./src/movingdirs.js","webpack://space-invaders/./src/invader.js","webpack://space-invaders/./src/bullet.js","webpack://space-invaders/./src/index.js","webpack://space-invaders/./src/player.js"],"sourcesContent":["const MovingDirs = {\n  left: 0,\n  right: 1,\n  downLeft: 2,\n  downRight: 3,\n};\n\nexport default MovingDirs;\n","import MovingDirs from './movingdirs.js';\n\nexport class Invader {\n  constructor(x, y, imageNum) {\n    this.x = x;\n    this.y = y;\n    this.width = 45;\n    this.height = 32;\n\n    this.image = new Image();\n    this.image.src = `assets/images/enemy${imageNum}.png`;\n  }\n\n  move(xVel, yVel) {\n    this.x += xVel;\n    this.y += yVel;\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.image,\n      this.x,\n      this.y,\n      this.width,\n      this.height\n    );\n  }\n\n  detectCollision(sprite) {\n    if (\n      this.x + this.width > sprite.x &&\n      this.x < sprite.x + sprite.width &&\n      this.y + this.height > sprite.y &&\n      this.y < sprite.y + sprite.height\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport class InvadersController {\n  invadersMap = [\n    [2, 3, 3, 3, 3, 2],\n    [2, 1, 1, 1, 1, 2],\n    [2, 3, 3, 3, 3, 2],\n    [2, 1, 1, 1, 1, 2],\n  ];\n\n  invadersRows = [];\n\n  curDir = MovingDirs.right;\n  xVel = 0;\n  yVel = 0;\n  defaultXVel = 1;\n  defaultYVel = 1;\n  defaultMoveTimer = 30;\n  moveTimer = this.defaultMoveTimer;\n  fireBulletTime = 100;\n  bulletTimer = this.fireBulletTime;\n\n  constructor(\n    canvas,\n    invadersBulletsController,\n    playerBulletsController\n  ) {\n    this.canvas = canvas;\n    this.invadersBulletsController = invadersBulletsController;\n    this.playerBulletsController = playerBulletsController;\n\n    this.createInvaders();\n  }\n\n  draw(ctx) {\n    this.decrementMoveTimer();\n    this.updateVelAndDirs();\n    this.detectCollision();\n    this.drawInvaders(ctx);\n    this.resetMoveTimer();\n    this.fire();\n  }\n\n  drawInvaders(ctx) {\n    this.invadersRows.flat().forEach((invader) => {\n      invader.move(this.xVel, this.yVel);\n      invader.draw(ctx);\n    });\n  }\n\n  detectCollision() {\n    this.invadersRows.forEach((invaderRow) => {\n      invaderRow.forEach((invader, idx) => {\n        if (this.playerBulletsController.detectCollision(invader)) {\n          invaderRow.splice(idx, 1);\n        }\n      });\n    });\n    this.invadersRows = this.invadersRows.filter(\n      (invaderRow) => invaderRow.length > 0\n    );\n  }\n\n  fire() {\n    this.bulletTimer--;\n    if (this.bulletTimer <= 0) {\n      this.bulletTimer = this.fireBulletTime;\n      const allInvaders = this.invadersRows.flat();\n      const invaderIdx = Math.floor(\n        Math.random() * allInvaders.length\n      );\n      const invader = allInvaders[invaderIdx];\n      this.invadersBulletsController.shoot(\n        invader.x + invader.width / 2,\n        invader.y,\n        -3\n      );\n    }\n  }\n\n  resetMoveTimer() {\n    if (this.moveTimer <= 0) this.moveTimer = this.defaultMoveTimer;\n  }\n\n  decrementMoveTimer() {\n    if (\n      this.curDir === MovingDirs.downLeft ||\n      this.curDir === MovingDirs.downRight\n    ) {\n      this.moveTimer--;\n    }\n  }\n\n  updateVelAndDirs() {\n    for (const invaderRow of this.invadersRows) {\n      if (this.curDir === MovingDirs.right) {\n        this.xVel = this.defaultXVel;\n        this.yVel = 0;\n        const lastInvader = invaderRow[invaderRow.length - 1];\n        if (lastInvader.x + lastInvader.width >= this.canvas.width) {\n          this.curDir = MovingDirs.downLeft;\n          break;\n        }\n      } else if (this.curDir === MovingDirs.downLeft) {\n        if (this.moveDown(MovingDirs.left)) {\n          break;\n        }\n      } else if (this.curDir === MovingDirs.left) {\n        this.xVel = -this.defaultXVel;\n        this.yVel = 0;\n        const firstInvader = invaderRow[0];\n        if (firstInvader.x <= 0) {\n          this.curDir = MovingDirs.downRight;\n          break;\n        }\n      } else if (this.curDir === MovingDirs.downRight) {\n        if (this.moveDown(MovingDirs.right)) {\n          break;\n        }\n      }\n    }\n  }\n\n  moveDown(newDir) {\n    this.xVel = 0;\n    this.yVel = this.defaultYVel;\n    if (this.moveTimer <= 0) {\n      this.curDir = newDir;\n      return true;\n    }\n    return false;\n  }\n\n  createInvaders() {\n    this.invadersMap.forEach((row, idx) => {\n      this.invadersRows[idx] = [];\n      row.forEach((invaderNum, invaderIdx) => {\n        if (invaderNum > 0) {\n          this.invadersRows[idx].push(\n            new Invader(invaderIdx * 50, idx * 35, invaderNum)\n          );\n        }\n      });\n    });\n  }\n\n  collideWith(sprite) {\n    return this.invadersRows\n      .flat()\n      .some((invader) => invader.detectCollision(sprite));\n  }\n}\n","export class Bullet {\n  constructor(canvas, x, y, vel, color) {\n    this.canvas = canvas;\n    this.x = x;\n    this.y = y;\n    this.vel = vel;\n    this.color = color;\n\n    this.width = 5;\n    this.height = 20;\n  }\n\n  draw(ctx) {\n    this.y -= this.vel;\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n  }\n\n  detectCollision(sprite) {\n    if (\n      this.x + this.width > sprite.x &&\n      this.x < sprite.x + sprite.width &&\n      this.y + this.height > sprite.y &&\n      this.y < sprite.y + sprite.height\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport class BulletsController {\n  bullets = [];\n  timeTilNextBulletAllowed = 0;\n\n  constructor(canvas, maxBullets, color) {\n    this.canvas = canvas;\n    this.maxBullets = maxBullets;\n    this.color = color;\n  }\n\n  draw(ctx) {\n    this.bullets = this.bullets.filter(\n      (bullet) =>\n        bullet.y + bullet.width > 0 && bullet.y <= this.canvas.height\n    );\n\n    this.bullets.forEach((bullet) => bullet.draw(ctx));\n\n    if (this.timeTilNextBulletAllowed > 0)\n      this.timeTilNextBulletAllowed--;\n  }\n\n  detectCollision(sprite) {\n    const bulletCollisionIdx = this.bullets.findIndex((bullet) =>\n      bullet.detectCollision(sprite)\n    );\n\n    if (bulletCollisionIdx >= 0) {\n      this.bullets.splice(bulletCollisionIdx, 1);\n      return true;\n    }\n    return false;\n  }\n\n  shoot(x, y, vel, timeTilNextBulletAllowed = 0) {\n    if (\n      this.timeTilNextBulletAllowed <= 0 &&\n      this.bullets.length < this.maxBullets\n    ) {\n      const bullet = new Bullet(this.canvas, x, y, vel, this.color);\n      this.bullets.push(bullet);\n      this.timeTilNextBulletAllowed = timeTilNextBulletAllowed;\n    }\n  }\n}\n","import { InvadersController } from './invader.js';\nimport Player from './player.js';\nimport { BulletsController } from './bullet.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {});\n\nconst canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\n\n// canvas.width = 700;\n// canvas.height = 700;\n\nconst background = new Image();\nbackground.src = 'assets/images/space.png';\n\nconst playerBulletController = new BulletsController(\n  canvas,\n  10,\n  'red'\n);\nconst invaderBulletController = new BulletsController(\n  canvas,\n  5,\n  'blue'\n);\n\nconst invaderController = new InvadersController(\n  canvas,\n  invaderBulletController,\n  playerBulletController\n);\n\nconst player = new Player(canvas, 3, playerBulletController);\n\nlet isGameOver = false;\nlet win = false;\n\nconst game = function () {\n  checkGameOver();\n  ctx.drawImage(background, 0, 0, canvas.width, canvas.height);\n  displayGameOver();\n\n  if (!isGameOver) {\n    invaderController.draw(ctx);\n    player.draw(ctx);\n    playerBulletController.draw(ctx);\n    invaderBulletController.draw(ctx);\n  }\n};\n\nconst checkGameOver = function () {\n  if (isGameOver) {\n    return;\n  }\n\n  if (invaderBulletController.detectCollision(player))\n    isGameOver = true;\n\n  if (invaderController.collideWith(player)) isGameOver = true;\n\n  if (invaderController.invadersRows.length === 0) {\n    win = true;\n    isGameOver = true;\n  }\n};\n\nconst displayGameOver = function () {\n  if (isGameOver) {\n    let text = win ? 'You Win' : 'Game Over';\n    let textOffset = win ? 3 : 5;\n\n    ctx.fillStyle = 'white';\n    ctx.font = '70px Space Invaders';\n    ctx.fillText(text, canvas.width / textOffset, canvas.height / 2);\n  }\n};\n\n// Element\nconst startGame = document.querySelector('.start-game');\n\nconst start = function () {\n  setInterval(game, 1000 / 60);\n};\nstartGame.addEventListener('click', start);\n","class Player {\n  rightPress = false;\n  leftPress = false;\n  shootPress = false;\n\n  constructor(canvas, vel, bulletsController) {\n    this.canvas = canvas;\n    this.vel = vel;\n    this.bulletsController = bulletsController;\n\n    this.x = this.canvas.width / 2;\n    this.y = this.canvas.height - 50;\n    this.width = 50;\n    this.height = 50;\n    this.image = new Image();\n    this.image.src = 'assets/images/player.png';\n\n    document.addEventListener('keydown', this.keydown);\n    document.addEventListener('keyup', this.keyup);\n  }\n\n  move() {\n    if (this.leftPress) this.x -= this.vel;\n    if (this.rightPress) this.x += this.vel;\n  }\n\n  draw(ctx) {\n    if (this.shootPress) {\n      this.bulletsController.shoot(\n        this.x + this.width / 2,\n        this.y,\n        4,\n        10\n      );\n    }\n    this.move();\n    this.wallCollision();\n    ctx.drawImage(\n      this.image,\n      this.x,\n      this.y,\n      this.width,\n      this.height\n    );\n  }\n\n  wallCollision() {\n    if (this.x < 0) this.x = 0;\n    if (this.x > this.canvas.width - this.width)\n      this.x = this.canvas.width - this.width;\n  }\n\n  keydown = (e) => {\n    if (e.code === 'ArrowRight') this.rightPress = true;\n\n    if (e.code === 'ArrowLeft') this.leftPress = true;\n\n    if (e.code === 'Space') this.shootPress = true;\n  };\n\n  keyup = (e) => {\n    if (e.code === 'ArrowRight') this.rightPress = false;\n\n    if (e.code === 'ArrowLeft') this.leftPress = false;\n\n    if (e.code === 'Space') this.shootPress = false;\n  };\n}\n\nexport default Player;\n"],"names":["Invader","constructor","x","y","imageNum","this","width","height","image","Image","src","move","xVel","yVel","draw","ctx","drawImage","detectCollision","sprite","Bullet","canvas","vel","color","fillStyle","fillRect","BulletsController","maxBullets","bullets","filter","bullet","forEach","timeTilNextBulletAllowed","bulletCollisionIdx","findIndex","splice","shoot","length","push","document","addEventListener","getElementById","getContext","background","playerBulletController","invaderBulletController","invaderController","invadersBulletsController","playerBulletsController","MovingDirs","defaultMoveTimer","fireBulletTime","createInvaders","decrementMoveTimer","updateVelAndDirs","drawInvaders","resetMoveTimer","fire","invadersRows","flat","invader","invaderRow","idx","bulletTimer","allInvaders","Math","floor","random","moveTimer","curDir","defaultXVel","lastInvader","moveDown","newDir","defaultYVel","invadersMap","row","invaderNum","invaderIdx","collideWith","some","player","bulletsController","e","code","rightPress","leftPress","shootPress","keydown","keyup","wallCollision","isGameOver","win","game","checkGameOver","displayGameOver","text","textOffset","font","fillText","querySelector","setInterval"],"sourceRoot":""}